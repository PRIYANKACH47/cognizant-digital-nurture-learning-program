<div id="loading" style="display:none;">Loading events...</div>
<div id="eventsContainer"></div>

const eventsContainer = document.getElementById("eventsContainer");
const loading = document.getElementById("loading");

// Mock API URL (you can replace with a real endpoint)
const apiURL = "https://mockapi.io/events"; // For demonstration, replace with a working API or mock

// --- Using Promises (.then/.catch) ---

function fetchEventsWithPromises() {
  loading.style.display = "block";
  eventsContainer.innerHTML = "";

  fetch(apiURL)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(events => {
      loading.style.display = "none";
      displayEvents(events);
    })
    .catch(error => {
      loading.style.display = "none";
      eventsContainer.textContent = `Error fetching events: ${error.message}`;
    });
}

// --- Using async/await ---

async function fetchEventsAsync() {
  loading.style.display = "block";
  eventsContainer.innerHTML = "";

  try {
    const response = await fetch(apiURL);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const events = await response.json();
    loading.style.display = "none";
    displayEvents(events);
  } catch (error) {
    loading.style.display = "none";
    eventsContainer.textContent = `Error fetching events: ${error.message}`;
  }
}

// --- Helper to display events ---

function displayEvents(events) {
  if (!events.length) {
    eventsContainer.textContent = "No events found.";
    return;
  }
  events.forEach(event => {
    const div = document.createElement("div");
    div.className = "eventCard";
    div.textContent = `${event.name} - ${event.date}`;
    eventsContainer.appendChild(div);
  });
}

// --- Run one of the fetch functions ---

// Uncomment to test Promises version:
// fetchEventsWithPromises();

// Uncomment to test async/await version:
fetchEventsAsync();
